repositories {
    mavenCentral()
}

allprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name + "-" + project.name + "-" + rootProject.minecraft_version
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        mavenCentral()
        maven {
            url 'https://jitpack.io'
        }
    }


    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"

        def javaTarget = 17
        it.options.release = javaTarget

        sourceCompatibility = JavaVersion.toVersion(javaTarget)
        targetCompatibility = JavaVersion.toVersion(javaTarget)

        if (JavaVersion.current() < JavaVersion.toVersion(javaTarget)) {
            toolchain.languageVersion.set(JavaLanguageVersion.of(javaTarget))
        }
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = rootProject.maven_group + "-" + project.name
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

subprojects {
    if (it.name != "common") {

        dependencies {
            compileOnly project(":common")
        }

        processResources {
            from project(":common").sourceSets.main.resources
        }

        tasks.withType(JavaCompile) {
            source(project(":common").sourceSets.main.allSource)
        }
    }
    if (it.name != "fabric-client") {
        dependencies {
            // As in common we don't have Minecraft source, we still need gson for config
            compileOnly "com.google.code.gson:gson:2.8.9"
            testCompileOnly("com.google.code.gson:gson:2.8.9")  // todo
            // And guava
            compileOnly "com.google.guava:guava:31.0.1-jre"
            testCompileOnly("com.google.guava:guava:31.0.1-jre")

            // Logging
            def logVersion = "2.17.0"
            compileOnly "org.apache.logging.log4j:log4j-api:${logVersion}"
            compileOnly "org.apache.logging.log4j:log4j-core:${logVersion}"
            compileOnly "org.apache.logging.log4j:log4j-slf4j-impl:${logVersion}"

            testCompileOnly("org.apache.logging.log4j:log4j-api:${logVersion}")
            testCompileOnly("org.apache.logging.log4j:log4j-core:${logVersion}")
            testCompileOnly("org.apache.logging.log4j:log4j-slf4j-impl:${logVersion}")
        }
    }
}
