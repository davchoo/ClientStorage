plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT' apply false
    id 'org.quiltmc.quilt-mappings-on-loom' version '4.2.0' apply false
    id "com.modrinth.minotaur" version "2.+" apply false
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name + "-" + project.name + "-" + rootProject.minecraft_version
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        mavenCentral()
        maven {
            url 'https://jitpack.io'
        }
    }


    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"

        def javaTarget = 17
        it.options.release = javaTarget

        sourceCompatibility = JavaVersion.toVersion(javaTarget)
        targetCompatibility = JavaVersion.toVersion(javaTarget)

        if (JavaVersion.current() < JavaVersion.toVersion(javaTarget)) {
            toolchain.languageVersion.set(JavaLanguageVersion.of(javaTarget))
        }
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = rootProject.maven_group + "-" + project.name
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

subprojects {
    if (it.name != "common") {
        apply plugin: "com.modrinth.minotaur"

        if (it.name.startsWith("fabric")) {
            apply plugin: "fabric-loom"
            apply plugin: "org.quiltmc.quilt-mappings-on-loom"

            dependencies {
                // To change the versions see the gradle.properties file
                minecraft "com.mojang:minecraft:${project.minecraft_version}"
                mappings loom.layered {
                    it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${rootProject.minecraft_version}+build.3:v2"))
                    // https://lambdaurora.dev/tools/import_quilt.html
                    it.officialMojangMappings {
                        setNameSyntheticMembers(false)
                    }
                }

                modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

                // Fabric API. This is technically optional, but you probably want it anyway.
                modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
            }

            processResources {
                inputs.property "version", rootProject.version

                filesMatching("fabric.mod.json") {
                    expand "version": rootProject.version
                }
            }

            java {
                // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
                // if it is present.
                // If you remove this line, sources will not be generated.
                withSourcesJar()
            }
        }

        dependencies {
            compileOnly project(":common")
        }

        processResources {
            from project(":common").sourceSets.main.resources
        }

        tasks.withType(JavaCompile) {
            source(project(":common").sourceSets.main.allSource)
        }

        modrinth {
            token = System.getenv("MODRINTH_TOKEN")
            // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
            projectId = "cae2" // This can be the project ID or the slug. Either will work!
            versionNumber = project.name + "-" + rootProject.minecraft_version + "+" + version
            // You don't need to set this manually. Will fail if Modrinth has this version already
            versionType = "release" // This is the default -- can also be `beta` or `alpha`
            uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
            gameVersions = [rootProject.minecraft_version] // Must be an array, even with only one version
        }

    } else {
        dependencies {
            // As in common we don't have Minecraft source, we still need gson for config
            compileOnly "com.google.code.gson:gson:2.8.9"
            // And guava
            compileOnly "com.google.guava:guava:31.0.1-jre"

            // Logging
            def logVersion = "2.17.0"
            compileOnly "org.apache.logging.log4j:log4j-api:${logVersion}"
            compileOnly "org.apache.logging.log4j:log4j-core:${logVersion}"
            compileOnly "org.apache.logging.log4j:log4j-slf4j-impl:${logVersion}"
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }
}
